<?xml version="1.0"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0"><dict>
<!--InitialRunlevel: Specifies how far startup should proceed before pausing for user interaction.
This value only affects startup, and setting this value from the simulator command prompt will have no effect.  (Use the 'runlevel' command instead.)-->
<key>InitialRunlevel</key> <string>RUNNING</string>

<!--InitialTime: The value to initialize the simulator's clock (in milliseconds)-->
<key>InitialTime</key> <integer>0</integer>

<!--======== Motion ========-->
<!--Parameters for motion simulation-->
<key>Motion</key> <dict>
	<!--FeedbackDelay: Delay (in milliseconds) to apply to motion output before feeding back to sensor values (simulates (very roughly) inertia and system response time); 0 indicates instantaneous/perfect joint control, negative values indicate no feedback (only sensor data sets joint positions)-->
	<key>FeedbackDelay</key> <integer>0</integer>
	
	<!--OverrideSensors: Allows motion feedback to override position values from sensor data loaded from disk.
	If false, feedback is only provided when no other sensor data is being provided-->
	<key>OverrideSensors</key> <false/>
	
	<!--Verbose: Report whenever motion commands are being processed or joints are updated
	0 - nothing, 1 - errors, 2 - warnings (e.g. dropped frames), 3 - notification every frame-->
	<key>Verbose</key> <integer>1</integer>
	
	<!--ZeroPIDFeedback: When set to false, if PIDs are set to zero, then sensor values are used to set joint positions; otherwise joint position sensors would only be used if FeedbackDelay is negative-->
	<key>ZeroPIDFeedback</key> <false/>
</dict>

<!--Multiprocess: The processing/threading model to use - true to use real process forks a la Aibo/Aperios, or false to just more threads like a sane person would do-->
<key>Multiprocess</key> <false/>

<!--Speed: The speed at which to run the simulation, as a multiple of "real-time".
For example, '1' is normal, '0.5' is half-speed, '0' is paused.
Any negative value requests non-realtime mode, where the clock is moved as fast as processing (or manual control) allows.-->
<key>Speed</key> <real>1</real>

<!--WaitForSensors: If true, wait for initial sensor readings before triggering the startup behavior or starting the motion polling thread.  On some platforms, sensed output values can be used to initialize output positions.  On others, you may be unable to get any feedback, or can only expect feedback if the robot was left running and the executable is reconnecting.-->
<key>WaitForSensors</key> <false/>

<!--======== CommPorts ========-->
<!--Communication portals for use by device drivers-->
<key>CommPorts</key> <dict/>

<!--======== Drivers ========-->
<!--Settings for device drivers-->
<key>Drivers</key> <dict>
	<!--======== TeRK ========-->
	<key>TeRK</key> <dict>
		<!--.type: Stores the typename of the class so it can be re-instantiated on load.
		** Do not edit ** -->
		<key>.type</key> <string>TeRK</string>
	</dict>
</dict>

<!--======== Sensors ========-->
<!--Settings for the loading of sensor values-->
<key>Sensors</key> <dict>
	<!--Framerate: The rate at which images should be loaded.  This is passed as a hint to the source, which may be limited to multiples of its capture device frequency.-->
	<key>Framerate</key> <real>66.6667</real>
	
	<!--Frozen: If true, no frames will be sent, except via explicit 'advance' commands; if false, the thread will run and send messages at the requested times automatically-->
	<key>Frozen</key> <false/>
	
	<!--Heartbeat: If enabled, an empty "heartbeat" message is sent at the appropriate framerate, even if no data is being processed (i.e. frozen, no data loaded, or out of frames); this will cause an update event within the simulator, repeating processing on the previous data.-->
	<key>Heartbeat</key> <true/>
	
	<!--Source: Names a DeviceDriver instance from which data will be taken.
	Can be either just the driver name (use first data source), or 'DriverName.QueueName'.
	Available data sources: TeRK.Sensors -->
	<key>Source</key> <string></string>
	
	<!--Verbose: Controls how much feedback to give on the console regarding progress
	  0 - none
	  1 - report when messages are dropped
	  2 - also report when a message is sent
	  3 - also report when heartbeat is sent/dropped, and when loop occurs
	  4 - also report when each message is preloaded-->
	<key>Verbose</key> <integer>0</integer>
</dict>

<!--======== Vision ========-->
<!--Settings for the loading of camera frames-->
<key>Vision</key> <dict>
	<!--Framerate: The rate at which images should be loaded.  This is passed as a hint to the source, which may be limited to multiples of its capture device frequency.-->
	<key>Framerate</key> <real>30</real>
	
	<!--Frozen: If true, no frames will be sent, except via explicit 'advance' commands; if false, the thread will run and send messages at the requested times automatically-->
	<key>Frozen</key> <false/>
	
	<!--Heartbeat: If enabled, an empty "heartbeat" message is sent at the appropriate framerate, even if no data is being processed (i.e. frozen, no data loaded, or out of frames); this will cause an update event within the simulator, repeating processing on the previous data.-->
	<key>Heartbeat</key> <true/>
	
	<!--Source: Names a DeviceDriver instance from which data will be taken.
	Can be either just the driver name (use first data source), or 'DriverName.QueueName'.
	Available data sources: TeRK.Camera -->
	<key>Source</key> <string>TeRK</string>
	
	<!--Verbose: Controls how much feedback to give on the console regarding progress
	  0 - none
	  1 - report when messages are dropped
	  2 - also report when a message is sent
	  3 - also report when heartbeat is sent/dropped, and when loop occurs
	  4 - also report when each message is preloaded-->
	<key>Verbose</key> <integer>0</integer>
</dict>
</dict></plist>
